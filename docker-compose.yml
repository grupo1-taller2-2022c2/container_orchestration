version: "3.3"
services:

  backoffice_frontend:
    restart: always
    build: ..//backoffice-front/ 
    container_name: ${BACKOFFICE_FRONT_CONTAINER_NAME}
    stdin_open: true 
    tty: true        
    ports:
      - 3003:3000
    expose:
      - 3000
    volumes:
      - ..//backoffice-front:/webgui
      - /webgui/node_modules
    environment:
      - REACT_APP_BACKEND_DIRECTION=http://localhost:3006
      - PORT=3000
    networks:
      - my_network

  api_gateway:
    restart: always
    build: ..//api_gateway/ 
    container_name: ${API_GATEWAY_CONTAINER_NAME}
    stdin_open: true 
    tty: true
    entrypoint: ../start-reload.sh # Para que se haga el live reload (solo dev, sobrecarga el entrypoint del Dockerfile)        
    ports:
      - 3005:3000
    expose:
      - 3000
    volumes:
      - ..//api_gateway:/app
    environment:
      - PORT=3000
      - LOG_LEVEL=debug
      - USERS_BASE_URL=http://${USERS_MS_CONTAINER_NAME}:3000
      - TRIPS_BASE_URL=http://${TRIPS_MS_CONTAINER_NAME}:3000
      - WALLETS_BASE_URL=http://${WALLETS_MS_CONTAINER_NAME}:3000
      - BACKOFFICE_BASE_URL=http://${BACKOFFICE_MS_CONTAINER_NAME}:3000
      - ENABLE_RESET=True
    networks:
      - my_network

  backoffice_api_gateway:
    restart: always
    build: ..//backoffice_api_gateway/ 
    container_name: ${BACKOFFICE_API_GATEWAY_CONTAINER_NAME}
    stdin_open: true 
    tty: true
    entrypoint: ../start-reload.sh        
    ports:
      - 3006:3000
    expose:
      - 3000
    volumes:
      - ..//backoffice_api_gateway:/app
    environment:
      - PORT=3000
      - LOG_LEVEL=debug
      - BACKOFFICE_BASE_URL=http://${BACKOFFICE_MS_CONTAINER_NAME}:3000
      - TRIPS_BASE_URL=http://${TRIPS_MS_CONTAINER_NAME}:3000
      - WALLETS_BASE_URL=http://${WALLETS_MS_CONTAINER_NAME}:3000
    networks:
      - my_network

  users_backend:
    restart: always
    build: ..//users/ 
    container_name: ${USERS_MS_CONTAINER_NAME}
    stdin_open: true 
    tty: true
    entrypoint: ../start-reload.sh       
    ports:
      - 3001:3000
    expose:
      - 3000
    volumes:
      - ..//users:/app
    links:
      - ${USERS_DB_SERVICE_NAME}
    environment:
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:grupo1@${USERS_DB_CONTAINER_NAME}:5432/postgres
      - POSTGRES_PASSWORD=grupo1
      - LOG_LEVEL=debug
      - BACKOFFICE_BASE_URL=http://${BACKOFFICE_MS_CONTAINER_NAME}:3000
      - WALLETS_BASE_URL=http://${WALLETS_MS_CONTAINER_NAME}:3000
    depends_on:
      - ${USERS_DB_SERVICE_NAME}
    networks:
      - my_network

  users_dev_db:
    image: postgres
    container_name: ${USERS_DB_CONTAINER_NAME}
    environment:
      - POSTGRES_PASSWORD=grupo1
    expose:
      - 5432
    ports:
      - 6543:5432
    networks:
      - my_network

  trips_backend:
    restart: always
    build: ..//trips/ 
    container_name: ${TRIPS_MS_CONTAINER_NAME}
    stdin_open: true 
    tty: true
    entrypoint: ../start-reload.sh
    ports:
      - 3002:3000
    expose:
      - 3000
    volumes:
      - ..//trips:/app
    links:
      - ${TRIPS_DB_SERVICE_NAME}
    environment:
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:grupo1@${TRIPS_DB_CONTAINER_NAME}:5432/postgres
      - POSTGRES_PASSWORD=grupo1
      - LOG_LEVEL=debug
      - USERS_BASE_URL=http://${USERS_MS_CONTAINER_NAME}:3000
      - WALLETS_BASE_URL=http://${WALLETS_MS_CONTAINER_NAME}:3000
    depends_on:
      - ${TRIPS_DB_SERVICE_NAME}
    networks:
      - my_network

  trips_dev_db:
    image: postgres
    container_name: ${TRIPS_DB_CONTAINER_NAME}
    environment:
      - POSTGRES_PASSWORD=grupo1
    expose:
      - 5432
    ports:
      - 6544:5432
    networks:
      - my_network

  backoffice_backend:
    restart: always
    build: ..//backoffice/ 
    container_name: ${BACKOFFICE_MS_CONTAINER_NAME}
    stdin_open: true 
    tty: true
    entrypoint: ../start-reload.sh    
    ports:
      - 3007:3000
    expose:
      - 3000
    volumes:
      - ..//backoffice:/app
    links:
      - ${BACKOFFICE_DB_SERVICE_NAME}
    environment:
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:grupo1@${BACKOFFICE_DB_CONTAINER_NAME}:5432/postgres
      - POSTGRES_PASSWORD=grupo1
      - LOG_LEVEL=debug
      - USERS_BASE_URL=http://${USERS_MS_CONTAINER_NAME}:3000
      - WALLETS_BASE_URL=http://${WALLETS_MS_CONTAINER_NAME}:3000
    depends_on:
      - ${BACKOFFICE_DB_SERVICE_NAME}
    networks:
      - my_network

  backoffice_dev_db:
    image: postgres
    container_name: ${BACKOFFICE_DB_CONTAINER_NAME}
    environment:
      - POSTGRES_PASSWORD=grupo1
    expose:
      - 5432
    ports:
      - 6545:5432
    networks:
      - my_network

  wallets_backend:
    build: ..//wallets/
    container_name: ${WALLETS_MS_CONTAINER_NAME}
    restart: always
    expose:
      - 3000   
    ports:
      - 3008:3000
    volumes:
      - ..//wallets:/wallets_app
      - /wallets_app/node_modules
    environment:
      PORT: 3000
      MONGODB_URL: mongodb+srv://admin:grupo1@fiuberwalletsdev.qy29k8l.mongodb.net/?retryWrites=true&w=majority
      MONGODB_NAME: fiuber
    networks:
      - my_network

networks:
  my_network:
    driver: bridge